const moment = require('moment');
const {decrypt, ping} = require('@activeprospect/trustedform-cert-id');
const urlType = require('./url');
const normalize = require('../normalize');

const parse = function (str) {
  if (!str) return str;
  const parsed = urlType.parse(str);
  if (!parsed.valid) return failure(parsed);
  const insecureProtocol = parsed.protocol !== 'https';
  const invalidHost = !parsed.host.match(/(cert|ping)\.(staging\.)?trustedform\.com/);
  let id = getIdFromPath(parsed.path);
  if (insecureProtocol || invalidHost || !id) {
    return failure(parsed);
  }
  const cert = decrypt(id);
  if (!cert) {
    return failure(parsed);
  }
  const age = calculateAge(cert.createdAt);

  const normal = `https://${parsed.host}/${id}`;

  const rtn = new String(normal);
  rtn.raw = parsed.raw;
  rtn.type = cert.type;
  rtn.cert_id = id;
  rtn.is_expired = age > 90;
  rtn.is_web = cert.type === 'web';
  rtn.is_mobile = cert.type === 'mobile';
  rtn.is_facebook = cert.type === 'facebook';
  rtn.is_masked = cert.type === 'masked';
  rtn.age_in_days = age;
  rtn.ping_url = getPingUrl(id, cert);
  rtn.host = parsed.host; // backward compatibility
  rtn.path = parsed.path; // backward compatibility
  rtn.valid = age <= 90;
  return rtn;
};

const getPingUrl = (id, cert) => {
  if (cert.isPing) {
    return constructPingUrl(id)
  } else {
    return generatePingUrl(id)
  }
}

const failure = (parsed) => {
  const rtn = new String(parsed.toString());
  rtn.raw = parsed.raw;
  rtn.valid = false;
  return rtn;
}

const generatePingUrl = (certId) => {
  return constructPingUrl(ping(certId));
}

const constructPingUrl = (pingId) => {
  if (!pingId) { return null; }
  return `https://ping.trustedform.com/${pingId}`;
}

const calculateAge = (date) => {
  if (date) {
    return moment(new Date()).diff(date, 'days');
  }
  return null;
}

const getIdFromPath = (path) => {
  if (!path) return null;
  // strip leading slash
  const pathNoSlash = path.replace(/^\//, '');
  let id = pathNoSlash;
  if (pathNoSlash.length === 40) {
    // hex strings can be made lower case
    id = pathNoSlash.toLowerCase();
  }
  return id;
};

module.exports = {
  parse,

  components: [
    {name: 'raw', type: 'string', description: 'Unmodified certificate URL'},
    {name: 'type', type: 'string', description: 'Type of TrustedForm certificate: web, facebook, mobile, masked'},
    {name: 'cert_id', type: 'string', description: 'The certificate identifier (up to 255 characters in length)'},
    {name: 'is_masked', type: 'boolean', description: 'True if the certificate is masked, otherwise false'},
    {name: 'is_expired', type: 'boolean', description: 'True if the certificate is more than 90 days old, otherwise false'},
    {name: 'is_web', type: 'boolean', description: 'True if the certificate was generated on a website, otherwise false'},
    {name: 'is_mobile', type: 'boolean', description: 'True if the certificate was generated in a mobile application, otherwise false'},
    {name: 'is_facebook', type: 'boolean', description: 'True if the certificate was generated by Facebook Lead Ads, otherwise false'},
    {name: 'age_in_days', type: 'number', description: 'The age of the certificate in days'},
    {name: 'ping_url', type: 'string', description: 'A generated ping URL to be used in ping/post lead distribution'},
    {name: 'host', type: 'string', deprecated: true, see: 'trustedform_cert_url.valid', description: 'Do not use. Instead check if the URL is valid, which validates the URL format, certificate ID format, and cert expiration date.'},
    {name: 'path', type: 'string', deprecated: true, see: 'trustedform_cert_url.cert_id', description: 'Do not use. Use the Cert ID value instead'}
  ],
  maskable: false,
  operators: [
    'is blank',
    'is not blank',
    'format is valid',
    'format is invalid'
  ],
  // in other types we run a sample value through the parse function in order to automatically get examples
  // to reflect the correct components if the type changes. this reduces maintenance. unfortunately, we can't do
  // that here because the examples require a test secret be set at startup. that secret is different in every
  // environment. we also purposefully left out the 'host' and 'path' properties since those are only there to satisfy
  // backward compatibility with certain existing clients.
  examples: [{
    normal: 'https://cert.trustedform.com/a1028cbb41b876744fa752eec276bec0e4c48b33',
    raw: 'https://cert.trustedform.com/a1028cbb41b876744fa752eec276bec0e4c48b33',
    type: 'web',
    cert_id: 'a1028cbb41b876744fa752eec276bec0e4c48b33',
    is_expired: false,
    is_web: true,
    is_mobile: false,
    is_facebook: false,
    is_masked: false,
    age_in_days: 9,
    ping_url: 'https://ping.trustedform.com/0.P%2FuqK4VTMuaIpWD4Si0I4IrvWdLCPIo0O43AzK%2FEzW-Ostug9U1yFFW4bc0ptb5-TcDmfxLG.SZHxVUOVcVbZySGA%2F%2Fn68A.YpPTCLuHxw-Brxcdd84nKA',
    valid: true
  },
    {
      normal: 'https://cert.trustedform.com/0.rpM21ddljS9BNNUOm6FZVVqb5C5JMk1cofI4nDGdwy5ezucyxjok9qLyUXMu9diW62Xac8xNMpomBf1B-XDpfbYvaFMr0YC-54TzHcLrni4.OHOMoMFXaX9YW9DoX_xeng.1vnf6DTWU7sJo6XAxlRP_w',
      raw: 'https://cert.trustedform.com/0.rpM21ddljS9BNNUOm6FZVVqb5C5JMk1cofI4nDGdwy5ezucyxjok9qLyUXMu9diW62Xac8xNMpomBf1B-XDpfbYvaFMr0YC-54TzHcLrni4.OHOMoMFXaX9YW9DoX_xeng.1vnf6DTWU7sJo6XAxlRP_w',
      type: 'facebook',
      cert_id: '0.rpM21ddljS9BNNUOm6FZVVqb5C5JMk1cofI4nDGdwy5ezucyxjok9qLyUXMu9diW62Xac8xNMpomBf1B-XDpfbYvaFMr0YC-54TzHcLrni4.OHOMoMFXaX9YW9DoX_xeng.1vnf6DTWU7sJo6XAxlRP_w',
      is_expired: false,
      is_web: false,
      is_mobile: false,
      is_facebook: true,
      is_masked: false,
      age_in_days: 9,
      ping_url: 'https://ping.trustedform.com/0.fNV51afuBYDqVpKGKsXzqM8KspV9V4M7ZQmP6PNvLxQkAIasDj19NxdVJhnJ7eR%2FOzSOr9qpLmoQ5ub3RzCWpawkCoB%2FigYsU-HQwAg0h8uaoQ19nlWSOe1i1Oj8lt4D5gPqBw0m8C%2FTSOEU6S7JKkLuIVhQRx4hjrkgpalyuZUGTHgKceUA80tvS9psBX8sp2ZoJ2cuek1O9w4XWMwfwogT%2FT8mBAuR2Q.sKCDoeI69htALO2AhFJbKg.rSPgEB3S9GRRorwl8roxTg',
      valid: true
    },
    {
      normal: 'https://cert.trustedform.com/11NgkzK_mroUbOD1-x66NigDliU1kdvbaCtLGvyja1K80vU1sKh9grlwP78vzKSp4ncwAfJAlNPNVY8f',
      raw: 'https://cert.trustedform.com/11NgkzK_mroUbOD1-x66NigDliU1kdvbaCtLGvyja1K80vU1sKh9grlwP78vzKSp4ncwAfJAlNPNVY8f',
      type: 'mobile',
      cert_id: '11NgkzK_mroUbOD1-x66NigDliU1kdvbaCtLGvyja1K80vU1sKh9grlwP78vzKSp4ncwAfJAlNPNVY8f',
      is_expired: false,
      is_web: false,
      is_mobile: true,
      is_facebook: false,
      is_masked: false,
      age_in_days: 9,
      ping_url: 'https://ping.trustedform.com/0.l0UiiPM1Q9uqn6SDoZDOj36wakWpa1lfYh%2FCJO00khdk29pj3VD%2FqIXXQsOrslKxhJVXapKFyyXrtun0Un4GCbYuBuI7HuCv5DUTZ3hFyJA%2FkPTolmw8rsfWnxPC6w.8aPkX7f2A-na3XEkRhltng.AnhW8PjUhbD6ATZ4O%2FwTWg',
      valid: true
    },
    {
      normal: 'https://ping.trustedform.com/0.1JT7QUPI1sOFZxpr72ZK45K0ck75kEBO9H3jNJuX8NkqMTv4UF-zrapBUlsefTP3lkXWh6qM.fF0DNrov0zNUNVRCqDV5dw.E2eYOJ5-dnAgiX02-96FNQ',
      raw: 'https://ping.trustedform.com/0.1JT7QUPI1sOFZxpr72ZK45K0ck75kEBO9H3jNJuX8NkqMTv4UF-zrapBUlsefTP3lkXWh6qM.fF0DNrov0zNUNVRCqDV5dw.E2eYOJ5-dnAgiX02-96FNQ',
      type: 'web',
      cert_id: '0.1JT7QUPI1sOFZxpr72ZK45K0ck75kEBO9H3jNJuX8NkqMTv4UF-zrapBUlsefTP3lkXWh6qM.fF0DNrov0zNUNVRCqDV5dw.E2eYOJ5-dnAgiX02-96FNQ',
      is_expired: false,
      is_web: true,
      is_mobile: false,
      is_facebook: false,
      is_masked: false,
      age_in_days: 9,
      ping_url: 'https://ping.trustedform.com/0.1JT7QUPI1sOFZxpr72ZK45K0ck75kEBO9H3jNJuX8NkqMTv4UF-zrapBUlsefTP3lkXWh6qM.fF0DNrov0zNUNVRCqDV5dw.E2eYOJ5-dnAgiX02-96FNQ',
      valid: true
    }]
};

