const moment = require('moment');
const {decrypt} = require('@activeprospect/trustedform-cert-id');
const urlType = require('./url');
const dateType = require('./date');
const normalize = require('../normalize');

const parse = function (str) {
  if (!str) return str;
  const parsed = urlType.parse(str);
  if (!parsed.valid) return {
    raw: parsed.raw,
    valid: false
  };
  const insecureProtocol = parsed.protocol !== 'https';
  const invalidHost = !parsed.host.match(/(cert|ping)\.trustedform\.com/);
  const id = getIdFromPath(parsed.path);
  if (insecureProtocol || invalidHost || !id) {
    return failure(parsed);
  }
  const cert = decrypt(id);
  if (!cert) {
    return failure(parsed);
  }
  const age = calculateAge(cert.createdAt);

  const rtn = new String(parsed.toString());
  rtn.raw = parsed.raw;
  rtn.type = cert.type;
  rtn.cert_id =  id;
  rtn.is_expired = age > 90;
  rtn.is_web = cert.type === 'web';
  rtn.is_mobile = cert.type === 'mobile';
  rtn.is_facebook = cert.type === 'facebook';
  rtn.is_masked = cert.type === 'masked';
  rtn.age_in_days = age;
  rtn.valid = true;
  return rtn;
};

const failure = (parsed) => {
  const rtn = new String(parsed.toString());
  rtn.raw = parsed.raw;
  rtn.valid = false;
  return rtn;
}

const calculateAge = (date) => {
  if (date) {
    return moment(new Date()).diff(date, 'days');
  }
  return null;
}

const getIdFromPath = (path) => {
  if (!path) return null;
  // strip leading slash
  return path.replace(/^\//, '');
};

module.exports = {
  parse,

  components: [
    {name: 'raw', type: 'string', description: 'Unmodified certificate URL'},
    {name: 'type', type: 'string', description: 'Type of TrustedForm certificate: web, facebook, mobile, masked'},
    {name: 'cert_id', type: 'string', description: 'The certificate identifier (up to 255 characters in length)'},
    {name: 'is_masked', type: 'boolean', description: 'True if the certificate is masked, otherwise false'},
    {
      name: 'is_expired',
      type: 'boolean',
      description: 'True if the certificate is more than 90 days old, otherwise false'
    },
    {
      name: 'is_web',
      type: 'boolean',
      description: 'True if the certificate was generated on a website, otherwise false'
    },
    {
      name: 'is_mobile',
      type: 'boolean',
      description: 'True if the certificate was generated in a mobile application, otherwise false'
    },
    {
      name: 'is_facebook',
      type: 'boolean',
      description: 'True if the certificate was generated by Facebook Lead Ads, otherwise false'
    },
    {name: 'age_in_days', type: 'number', description: 'The age of the certificate in days'}
  ],
  maskable: false,
  operators: [
    'is blank',
    'is not blank',
    'format is valid',
    'format is invalid'
  ],
  examples: [
    'https://cert.trustedform.com/a1028cbb41b876744fa752eec276bec0e4c48b33',
    'https://cert.trustedform.com/0.rpM21ddljS9BNNUOm6FZVVqb5C5JMk1cofI4nDGdwy5ezucyxjok9qLyUXMu9diW62Xac8xNMpomBf1B-XDpfbYvaFMr0YC-54TzHcLrni4.OHOMoMFXaX9YW9DoX_xeng.1vnf6DTWU7sJo6XAxlRP_w',
    'https://cert.trustedform.com/11NgkzK_mroUbOD1-x66NigDliU1kdvbaCtLGvyja1K80vU1sKh9grlwP78vzKSp4ncwAfJAlNPNVY8f',
    'https://ping.trustedform.com/0.1JT7QUPI1sOFZxpr72ZK45K0ck75kEBO9H3jNJuX8NkqMTv4UF-zrapBUlsefTP3lkXWh6qM.fF0DNrov0zNUNVRCqDV5dw.E2eYOJ5-dnAgiX02-96FNQ',
  ].map(parse).map(normalize)
};

// TODO: better examples
